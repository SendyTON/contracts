#include "/imports/stdlib.fc";

const op::result_delivery = "op::result_delivery"c;
const op::receive_request = "op::receive_request"c;

global cell results_dict;
global slice manager_address;

() load_data() impure {
    var ds = get_data().begin_parse();
    results_dict = ds~load_dict();
    manager_address = ds~load_msg_addr();
}

() save_data() impure {
    set_data(
        begin_cell()
            .store_dict(results_dict)
            .store_slice(manager_address)
            .end_cell()
    );
}

slice get_tester_address() asm "INT_TESTER";

() receive_result(int task_id, cell payload, cell result) impure {
    results_dict = dict_set(results_dict, 64, task_id, result);
    save_data();
}

() send_task(int adapter_id, cell payload) impure {
    builder msg_body = begin_cell()
        .store_uint(op::receive_request, 32)
        .store_uint(0, 64)
        .store_uint(adapter_id, 256)
        .store_ref(payload);

    cell msg_cell = msg_body.end_cell();

    send_raw_message(
        build_internal_message(
            to_addr = manager_address,
            amount = 1 ton,
            bounce = true,
            body = msg_cell
        ),
        1
    );
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    load_data();

    int op = in_msg_body~load_uint(32);

    if (op == op::result_delivery) {
        if (get_tester_address() != manager_address) {
            throw(301);
        }
        int task_id = in_msg_body~load_uint(64);
        cell payload = in_msg_body~load_ref();
        cell result = in_msg_body~load_ref();
        receive_result(task_id, payload, result);
    } else {
        throw(0xffff);
    }
}

cell build_internal_message(slice to_addr, int amount, int bounce, cell body) inline {
    builder b = begin_cell();
    b = b.store_uint(0x18, 6);
    b = b.store_uint(bounce ? 1 : 0, 2);
    b = b.store_slice(my_address());
    b = b.store_slice(to_addr);
    b = b.store_coins(amount);
    b = b.store_coins(0);
    b = b.store_coins(0);
    b = b.store_uint(0, 64);
    b = b.store_uint(0, 32);
    b = b.store_uint(0, 1);
    b = b.store_uint(0, 1);
    b = b.store_uint(0, 1);
    b = b.store_slice(body.begin_parse());
    return b.end_cell();
}

slice my_address() asm "MYADDR";
