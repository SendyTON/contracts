#include "/imports/stdlib.fc";

const op::new_task = "op::new_task"c;
const op::submit_result = "op::submit_result"c;
const op::forward_result = "op::forward_result"c;

global cell tasks_dict;
global slice manager_address;

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    load_data();

    int op = in_msg_body~load_uint(32);

    if (op == op::new_task) {
        if (get_sender_address() != manager_address) {
            throw(201);
        }
        int task_id = in_msg_body~load_uint(64);
        slice requester_address = in_msg_body~load_msg_addr();
        cell payload = in_msg_body~load_ref();

        builder task_builder = begin_cell()
            .store_slice(requester_address)
            .store_ref(payload)
            .store_uint(0, 1);
        cell task_cell = task_builder.end_cell();

        tasks_dict = tasks_dict.dict_set(64, task_id, task_cell);
        save_data();
    } else {
        throw(0xffff);
    }
}

() recv_external(slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    load_data();

    int op = in_msg_body~load_uint(32);

    if (op == op::submit_result) {
        int task_id = in_msg_body~load_uint(64);
        cell result = in_msg_body~load_ref();

        var (task_cell_opt, exists) = tasks_dict.dict_get?(64, task_id);
        if (exists == 0) {
            throw(202);
        }

        slice task_slice = task_cell_opt.begin_parse();
        slice requester_address = task_slice~load_slice();
        cell payload = task_slice~load_ref();
        int status = task_slice~load_uint(1);

        if (status != 0) {
            throw(203);
        }

        builder updated_task_builder = begin_cell()
            .store_slice(requester_address)
            .store_ref(payload)
            .store_uint(1, 1)
            .store_ref(result);
        cell updated_task_cell = updated_task_builder.end_cell();

        tasks_dict = tasks_dict.dict_set(64, task_id, updated_task_cell);

        builder msg_body = begin_cell()
            .store_uint(op::forward_result, 32)
            .store_uint(task_id, 64)
            .store_slice(requester_address)
            .store_ref(payload)
            .store_ref(result);
        cell msg_cell = msg_body.end_cell();

        send_raw_message(
            build_internal_message(manager_address, 1 ton, true, msg_cell),
            1
        );

        save_data();
    } else {
        throw(0xffff);
    }
}

() load_data() impure {
    var ds = get_data().begin_parse();
    tasks_dict = ds~load_dict();
    manager_address = ds~load_msg_addr();
}

() save_data() impure {
    set_data(
        begin_cell()
            .store_dict(tasks_dict)
            .store_slice(manager_address)
            .end_cell()
    );
}

slice get_sender_address() asm "INT_SENDER";

cell build_internal_message(slice to_addr, int amount, int bounce, cell body) inline {
    builder b = begin_cell();
    b = b.store_uint(0x18, 6);
    b = b.store_uint(bounce ? 1 : 0, 2);
    b = b.store_slice(my_address());
    b = b.store_slice(to_addr);
    b = b.store_coins(amount);
    b = b.store_coins(0);
    b = b.store_coins(0);
    b = b.store_uint(0, 64);
    b = b.store_uint(0, 32);
    b = b.store_uint(0, 1);
    b = b.store_uint(0, 1);
    b = b.store_uint(0, 1);
    b = b.store_slice(body.begin_parse());
    return b.end_cell();
}

slice my_address() asm "MYADDR";
